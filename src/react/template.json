{"BusinessService":"/* eslint-disable react/jsx-no-target-blank */\nimport React from 'react';\n\nexport default function Example() {\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"example\">\n        <h1>Positive Grid 徵資深前端工程師</h1>\n        <a\n          target=\"_blank\"\n          href=\"https://www.cakeresume.com/companies/positive-grid/jobs/96bc55\"\n          className=\"btn\"\n        >點我</a>\n      </div>\n      <div className=\"example\">\n        <h1>React 全攻略入門班 - 假日班</h1>\n        <h4>報名加碼送價值千元「Webpack 5 入門 線上課程」!</h4>\n        <img src=\"https://5xruby.tw/assets/images/talks/cover/react-js-c77f3549.jpg\" alt=\"\" className=\"mw-100\" />\n        <a\n          target=\"_blank\"\n          href=\"https://5xruby.tw/talks/react-js/?utm_source=milkmidi-react-vue\"\n          className=\"btn mt-2\"\n        >點我</a>\n      </div>\n    </div>\n  );\n}\n","Example0_state":"import React, { useState } from 'react';\n\nexport default function Example() {\n  const [count, setCount] = useState(0);\n  const atClick = () => {\n    // count = 100; // fail\n    setCount(count + 1);\n  };\n  return (\n    <div className=\"example\">\n      <h1>count:{count}</h1>\n      <button className=\"btn\" onClick={atClick}>addCount1</button>\n      <button className=\"btn\" onClick={() => atClick()}>addCount2</button>\n      <button className=\"btn\" onClick={() => setCount(count + 1)}>addCount3</button>\n    </div>\n  );\n}\n","Example1_props":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/*\n  <Example1 name=\"我要傳prop\" />\n */\n\nexport default function Example1(props) {\n  const {\n    name,\n    age = 18,\n  } = props;\n  return (\n    <div className=\"example\">\n      <h1>props.name:{name}, age:{age}</h1>\n    </div>\n  );\n}\n\nExample1.propTypes = {\n  name: PropTypes.string.isRequired,\n  age: PropTypes.number,\n};\n","Example1_props_tsx":"import React from 'react';\n\ntype Props = {\n  name: string;\n  age?: number;\n}\n\nexport default function Example1TSX(props:Props) {\n  const {\n    name,\n    age = 18\n  } = props;\n  return (\n    <div className=\"example\">\n      <h1>props.name:{name}, age:{age}</h1>\n    </div>\n  );\n}\n","Example2_ref":"import React, { useRef } from 'react';\n\nexport default function Example2() {\n  const domRef = useRef();\n  const atClick = () => {\n    domRef.current.focus();\n  };\n  return (\n    <div className=\"example\">\n      <input className=\"form-control\" ref={domRef} type=\"text\" />\n      <button className=\"btn\" onClick={atClick}>focusInput</button>\n    </div>\n  );\n}\n","Example3_lifecycle":"import React, { useRef, useEffect } from 'react';\n\nexport default function Example2() {\n  const domRef = useRef();\n  useEffect(() => {\n    console.log('React Component Mounted');\n    // useEffect 會等到 render 完成後才發生\n    // 此時可以存取元素\n    console.log(domRef.current);\n    return () => {\n      console.log('React Component Unmount');\n      // React 17.x 更新了 useEffect clear 時間點\n      // useEffect clear 會等到 render 完成後才發生\n      // 此時元素已刪除，所以 dom 會是 null\n      console.log(domRef.current); // this is null\n    };\n  }, []); // 這裡要填空 Array\n  return (\n    <div className=\"example\">\n      <div className=\"border p-3 bg-react text-white rounded\">\n        <h1 ref={domRef}>React, lifecycle</h1>\n      </div>\n    </div>\n  );\n}\n","Example4_conditional_rendering":"import React, { useState } from 'react';\n\nexport default function Example4() {\n  const [show, setShow] = useState(true);\n  const atClick = () => {\n    setShow(!show);\n  };\n  return (\n    <div className=\"example\">\n      <button className=\"btn mb-1\" onClick={atClick}>switch show:{show.toString()}</button>\n      {\n        show && (\n          <h1 className=\"border p-3 bg-react text-white rounded\">React</h1>\n        )\n      }\n      <h2\n        style={{\n          display: show ? 'block' : 'none'\n        }}\n        className=\"border p-3 bg-react text-white rounded\"\n      >css display block/none</h2>\n    </div>\n  );\n}\n","Example5_lists":"import React, { useState } from 'react';\n\nexport default function Example5() {\n  const [lists] = useState(['React', 'vue', 'angular', 'jQuery']);\n\n  return (\n    <div className=\"example\">\n      <ul className=\"border\">\n        { lists.map((text) => <li key={text}>{text}</li>) }\n      </ul>\n      <ul className=\"border\">\n        {\n          lists.map((text) => (\n            <React.Fragment key={text}>\n              <li>{text}</li>\n              <hr />\n            </React.Fragment>\n          ))\n        }\n      </ul>\n    </div>\n  );\n}\n","Example6_watch":"import React, { useState, useEffect, useLayoutEffect } from 'react';\n\nexport default function Example6Watch() {\n  const [count, setCount] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  useEffect(() => {\n    if (count === 5) {\n      alert('hi, React');\n      setCount(0);\n    }\n  }, [count]); // 當 Array 裡的期中一個值有更新，就會執行 useEffect\n\n  useLayoutEffect(() => {\n    if (count2 === 5) {\n      alert('hi, React');\n      setCount2(0);\n    }\n  }, [count2]);\n\n  return (\n    <div className=\"example\">\n      <div className=\"border p-1\">\n        <h1>useEffetct, count 到 5 就會跳 Alert:{count}</h1>\n        <p>會看到 count 是 5, 然後跳 Alert, 再變回 0</p>\n        <button className=\"btn\" onClick={() => setCount(count + 1)}>addCount</button>\n      </div>\n      <hr />\n      <div className=\"border p-1\">\n        <h1>useLayoutEffect, count2 到 5 就會跳 Alert:{count2}</h1>\n        <p>會看到 count 是 4, 然後跳 Alert, 再變回 0</p>\n        <button className=\"btn\" onClick={() => setCount2(count2 + 1)}>addCount2</button>\n      </div>\n    </div>\n  );\n}\n","Example7_useMemo":"import React, { useState, useMemo } from 'react';\n\nconst computeExpensiveValue = (value) => {\n  console.log('computeExpensiveValue');\n  let r = value;\n  for (let i = 0; i < 100000000; i += 1) {\n    r += 1;\n  }\n  return r;\n};\n\nexport default function Example7() {\n  const [count, setCount] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  console.time();\n  const memoizedValue = useMemo(() => {\n    const result = computeExpensiveValue(count);\n    return result;\n  }, [count]); // 當 count 有更新時才重新計算\n  console.timeEnd();\n\n  return (\n    <div className=\"example\">\n      <h1>count: {count}</h1>\n      <button className=\"btn\" onClick={() => setCount(count + 1)}>setCount</button>\n      <h2>memoizedValue: {memoizedValue}</h2>\n      <h1>count2: {count2}</h1>\n      <button className=\"btn\" onClick={() => setCount2(count2 + 1)}>setCount2</button>\n    </div>\n  );\n}\n","Example8_form_checkbox":"/* eslint-disable arrow-body-style */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { useState, useCallback } from 'react';\n\nconst SKILLS = ['react', 'vue', 'angular'];\nexport default function Example8() {\n  const [skills, setSkills] = useState([]);\n\n  const atChange = useCallback((e) => {\n    const { checked, value } = e.target;\n\n    setSkills((prev) => {\n      const idxOf = prev.indexOf(value);\n      if (checked && idxOf < 0) {\n        return prev.concat(value);\n      } if (idxOf > -1) {\n        return prev.slice(0, idxOf).concat(prev.slice(idxOf + 1));\n      }\n      return prev;\n    });\n  }, []);\n  return (\n    <div className=\"example\">\n      <h1>checkbox</h1>\n      <h4>skills:{JSON.stringify(skills)}</h4>\n      {\n        SKILLS.map((name) => (\n          <label key={name} className=\"mr-4\">\n            <input\n              type=\"checkbox\"\n              checked={skills.indexOf(name) !== -1}\n              value={name}\n              onChange={atChange}\n            />\n            <span>{name}</span>\n          </label>\n        ))\n      }\n    </div>\n  );\n}\n","Example8_form_input":"import React from 'react';\n\nexport default function Example8() {\n  const [name, setName] = React.useState('');\n  const atChange = (e) => {\n    setName(e.target.value);\n  };\n  return (\n    <div className=\"example\">\n      <h1>input</h1>\n      <h4>name:{name}</h4>\n      <input type=\"text\" className=\"form-control\" value={name} onChange={atChange} />\n    </div>\n  );\n}\n","PrismCode":"/* eslint-disable no-useless-escape */\nimport React from 'react';\n\nconst CLASS_PATTERN = / className=\"[a-zA-Z0-9:;\\.\\s\\(\\)\\-\\,]*\"/g;\n\ntype Props = {\n  code: string;\n  clearClassName? :boolean;\n}\nfunction PrismCode({ code, clearClassName = true }:Props) {\n  const domRef = React.useRef<HTMLElement>();\n  const formatCode = React.useMemo(() => {\n    if (clearClassName) {\n      return code.replace(CLASS_PATTERN, '');\n    }\n    return code;\n  }, [code, clearClassName]);\n  React.useEffect(() => {\n    window.Prism.highlightElement(domRef.current);\n  }, [formatCode]);\n  return (\n    <pre className=\"language-jsx border\" ref={domRef}>\n      {\n        formatCode\n      }\n    </pre>\n  );\n}\n\nexport default React.memo(PrismCode);\n"}