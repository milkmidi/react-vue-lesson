{"BusinessService":"<script>\nexport default {\n  setup() {\n    return {\n    };\n  },\n};\n</script>\n\n<template>\n  <div class=\"space-y-2\">\n    <div class=\"example\">\n      <h1>Vue.js 與 Vuex 前端開發實戰課程</h1>\n      <img class=\"mw-100\" src=\"https://5xruby.tw/assets/images/talks/cover/vue-js-61eaa1c7.jpg\" alt=\"\">\n      <a\n        target=\"_blank\"\n        href=\"https://5xruby.tw/talks/vue-js/?utm_source=milkmidi-react-vue\"\n        class=\"btn mt-2\"\n      >點我</a>\n    </div>\n  </div>\n</template>\n","Example0_state":"<script>\nexport default {\n  data() {\n    return {\n      count: 0,\n    };\n  },\n  methods: {\n    atClick() {\n      this.count += 1;\n    },\n    atClickWithParameter(value, event) {\n      this.count += value;\n      console.log(event);\n    }\n  },\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <h1>count:{{ count }}</h1>\n    <button class=\"btn\" @click=\"atClick\">addCount1</button>\n    <!-- vue 黑魔法，@click=\"atClick()\" 並不是執行 atClick() -->\n    <button class=\"btn\" @click=\"atClick()\">addCount2</button>\n    <button class=\"btn\" @click=\"count += 1\">addCount3</button>\n    <!-- 一定要寫 $event -->\n    <button class=\"btn\" @click=\"atClickWithParameter(5, $event)\">atClickWithParameter</button>\n  </div>\n</template>\n","Example0_state_composition":"<script>\nimport { reactive, ref } from 'vue';\n\nexport default {\n  setup() {\n    const count = ref(0);\n    const atClick = () => {\n      // ref 都要加 .value, 但在 template 不需要\n      count.value += 1;\n    };\n\n    const data = reactive({\n      name: 'milkmidi'\n    });\n    return {\n      count,\n      atClick,\n      data,\n    };\n  },\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <h1>Count:{{ count }}</h1>\n    <button class=\"btn\" @click=\"atClick\">addCount1</button>\n    <button class=\"btn\" @click=\"atClick()\">addCount2</button>\n    <button class=\"btn\" @click=\"count++\">addCount3</button>\n    <h2>data.name:{{ data.name }}</h2>\n    <button class=\"btn\" @click=\"data.name = '9527'\">updateName</button>\n  </div>\n</template>\n","Example10_inject":"<script>\nimport { inject } from 'vue';\n\nexport default {\n  inject: ['theme', 'toggleTheme'],\n  setup() {\n    const foo = inject('foo');\n    return { foo };\n  }\n};\n</script>\n\n<template>\n  <div class=\"border p-1\">\n    <h3>{{ theme.value }}</h3>\n    <h3>{{ foo }}</h3>\n    <button class=\"btn\" @click=\"toggleTheme\">toggleTheme</button>\n  </div>\n</template>\n","Example10_provide":"<script >\nimport {\n  computed, onMounted, onUnmounted, provide, ref\n} from 'vue';\nimport Example10Inject from './Example10_inject.vue';\n\nexport default {\n  components: {\n    Example10Inject\n  },\n  provide() {\n    return {\n      theme: computed(() => this.theme),\n      toggleTheme: this.toggleTheme\n    };\n  },\n  setup() {\n    const foo = ref(9527);\n    provide('foo', foo);\n\n    let timeoutId;\n    onMounted(() => {\n      timeoutId = setInterval(() => {\n        foo.value += 1;\n      }, 1000);\n    });\n    onUnmounted(() => clearInterval(timeoutId));\n  },\n  data: () => ({\n    theme: 'light'\n  }),\n  methods: {\n    toggleTheme() {\n      this.theme = this.theme === 'light' ? 'dark' : 'light';\n    }\n  }\n};\n</script>\n\n<template>\n  <div class=\"example\" :class=\"'theme-' + theme\">\n    <Example10Inject />\n  </div>\n</template>\n","Example1_props":"<script>\nexport default {\n  props: {\n    name: {\n      type: String,\n      default: 'defaultValue'\n    },\n  },\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <h1>props.name:{{ name }}</h1>\n    <!-- 因為 props 裡沒有定義 count, 就讀不到 -->\n    <h2>notdefined props count: {{ count }}</h2>\n  </div>\n</template>\n","Example2_ref":"<script>\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    // composition 無法使用 this\n    const domRef = ref();\n    const atClick = () => {\n      domRef.value.focus();\n    };\n    return {\n      domRef,\n      atClick\n    };\n  },\n  methods: {\n    atClick2() {\n      // 或是直接使用 this.$refs 取得\n      this.$refs.domRef.focus();\n    }\n  }\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <input ref=\"domRef\" class=\"form-control\">\n    <button class=\"btn\" @click=\"atClick\">focusInput</button>\n    <button class=\"btn\" @click=\"atClick2\">focusInput</button>\n  </div>\n</template>\n","Example3_lifecycle":"<script>\nimport { onMounted, onUnmounted } from 'vue';\n\nexport default {\n  setup() {\n    onMounted(() => {\n      console.log('vue composition onMounted');\n    });\n    onUnmounted(() => {\n      console.log('vue composition onUnmounted');\n    });\n  },\n  mounted() {\n    // dom 已更新，所以 this.$refs.root 有值\n    console.log('vue mounted');\n    console.log(this.$refs.root);\n  },\n  unmounted() {\n    // dom 已更新，所以 this.$refs.root 會是 null\n    console.log('vue unmounted');\n    console.log(this.$refs.root);\n  }\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <div class=\"border p-3 bg-vue text-white rounded\">\n      <h1 ref=\"root\">Vue, lifecycle</h1>\n    </div>\n  </div>\n</template>\n","Example4_conditional_rendering":"<script>\n\nexport default {\n  data() {\n    return {\n      show: true\n    };\n  },\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <button class=\"btn mb-1\" @click=\"show=!show\">switch show:{{ show }}</button>\n    <h1 v-if=\"show\" class=\"border p-3 bg-vue text-white rounded\">Vue</h1>\n    <h2 v-show=\"show\" class=\"border p-3 bg-vue text-white rounded\">css display block/none</h2>\n  </div>\n</template>\n","Example5_lists":"<script>\n\nexport default {\n  data() {\n    return {\n      lists: ['vue', 'React', 'angular', 'jQuery']\n    };\n  },\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <ul class=\"border\">\n      <li v-for=\"text in lists\" :key=\"text\">{{ text }}</li>\n    </ul>\n\n    <ul class=\"border\">\n      <template v-for=\"text in lists\" :key=\"text\">\n        <li>{{ text }}</li>\n        <hr>\n      </template>\n    </ul>\n  </div>\n</template>\n","Example6_watch":"<script>\nimport {\n  ref, watch, watchEffect\n} from 'vue';\n\nexport default {\n  setup() {\n    const name = ref('milkmidi');\n    // watch method 1\n    watch(name, (value) => {\n      console.log(value);\n    });\n    // watch method 2\n    watchEffect(() => {\n      console.log('name is:', name.value);\n    });\n\n    return { name };\n  },\n  data() {\n    return {\n      count: 0,\n      deepObj: {\n        a: {\n          b: {\n            c: {\n              name: 'milkmidi'\n            }\n          }\n        }\n      }\n    };\n  },\n  watch: {\n    count(newValue, oldValue) {\n      console.log(newValue, oldValue);\n      if (newValue === 5) {\n        alert('hi, vue');\n        this.count = 0;\n      }\n    },\n    // 這裡也可以 watch setup 的值\n    name(newValue) {\n      console.log('watch name', newValue);\n    },\n    'deepObj.a.b.c.name': function (newValue) {\n      console.log('deepObj.a.b.c.name', newValue);\n    },\n    deepObj: {\n      handler(newValue) {\n        console.log('deepObj name', newValue.a.b.c.name);\n      },\n      deep: true,\n    }\n  }\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <h1>count 到 5 就會跳 Alert:{{ count }}</h1>\n    <h3>name:{{ name }}</h3>\n    <button class=\"btn\" @click=\"count++\">addCount</button>\n    <button class=\"btn\" @click=\"name = +new Date() + ''\">setName</button>\n    <button class=\"btn\" @click=\"deepObj.a.b.c.name=Math.random()\">setDeepObj</button>\n  </div>\n</template>\n","Example7_computed":"<script>\nconst computeExpensiveValue = (value) => {\n  console.log('computeExpensiveValue');\n  let r = value;\n  for (let i = 0; i < 100000000; i += 1) {\n    r += 1;\n  }\n  return r;\n};\n\nexport default {\n  data() {\n    return {\n      count: 0,\n      count2: 0,\n    };\n  },\n  computed: {\n    memoizedValue() {\n      console.time();\n      const result = computeExpensiveValue(this.count);\n      console.timeEnd();\n      return result;\n    }\n  }\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <h1>count:{{ count }}</h1>\n    <button class=\"btn\" @click=\"count++\">setCount</button>\n    <h2>memoizedValue: {{ memoizedValue }}</h2>\n    <h1>count2: {{ count2 }}</h1>\n    <button class=\"btn\" @click=\"count2++\">setCount2</button>\n  </div>\n</template>\n","Example8_form_checkbox":"<script>\nexport default {\n  data() {\n    return {\n      skill: [],\n      SKILLS: ['react', 'vue', 'angular'],\n    };\n  },\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <h1>checkbox</h1>\n    <h4>skill:{{ skill }}</h4>\n    <!-- checkbox 一樣用 v-model -->\n    <template v-for=\"name in SKILLS\" :key=\"name\">\n      <label class=\"mr-4\">\n        <input\n          v-model=\"skill\"\n          type=\"checkbox\"\n          :value=\"name\"\n        >\n        <span>{{ name }}</span>\n      </label>\n    </template>\n  </div>\n</template>\n","Example8_form_input":"<script>\nexport default {\n  data() {\n    return {\n      name: ''\n    };\n  },\n};\n</script>\n\n<template>\n  <div class=\"example\">\n    <h1>input</h1>\n    <h4>name:{{ name }}</h4>\n    <input v-model=\"name\" class=\"form-control\" type=\"text\">\n    <!-- 上面這行等於下面這行 -->\n    <input\n      type=\"text\" class=\"form-control\"\n      :value=\"name\"\n      @input=\"name = $event.target.value\"\n    >\n  </div>\n</template>\n","PrismCode":"/* eslint-disable no-useless-escape */\nimport { h, ref, onMounted } from 'vue';\n\nconst CLASS_PATTERN = / class=\"[a-zA-Z0-9:;\\.\\s\\(\\)\\-\\,]*\"/g;\n\ntype Props = {\n  code: string;\n  clearClassName: boolean;\n}\n\nexport default {\n  props: {\n    code: {\n      type: String,\n      required: true,\n    },\n    clearClassName: {\n      type: Boolean,\n      default: true,\n    }\n  },\n  setup(props:Props) {\n    const {\n      code,\n      clearClassName,\n    } = props;\n    const domRef = ref<HTMLElement>(null);\n\n    onMounted(() => {\n      window.Prism.highlightElement(domRef.value);\n    });\n\n    const formatCode = clearClassName\n      ? code.replace(CLASS_PATTERN, '')\n      : code;\n\n    return () => h('pre', {\n      class: 'language-html border',\n      ref: domRef,\n    }, formatCode);\n  },\n};\n"}